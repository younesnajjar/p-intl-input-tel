import * as lpn from 'google-libphonenumber';
import { PhoneNumber } from 'google-libphonenumber';
import { ChangeData } from '../model/change-data';
import { LocalPhoneUtils } from "../utils/local-phone-utils";
/**
 * Check if the phone number provide is in a valid format compare to the country selected
 * If not, an error is pushed to the FormControl: { invalidFormat: true }
 * It can be catched in the parent form to display a user error
 * @param control
 */
export const phoneNumberValidator = (control) => {
    if (!control.value)
        return;
    // @ts-ignore
    // Native element property is added with NativeElementInjectorDirective
    const el = control['nativeElement'];
    const inputBox = el?.querySelector('input[type="tel"]') || undefined;
    if (inputBox) {
        const isCheckValidation = !!inputBox.getAttribute('validation');
        if (!isCheckValidation)
            control.clearValidators();
        const phoneUtil = lpn.PhoneNumberUtil.getInstance();
        const phoneNumber = phoneUtil.parse(control.value);
        const phoneFormatted = new ChangeData(!control.value ? new PhoneNumber() : phoneNumber);
        const number = phoneUtil.parse(phoneFormatted.number, LocalPhoneUtils.getCountryIsoCode(phoneNumber, phoneNumber?.getCountryCode()));
        if (!phoneUtil.isValidNumberForRegion(number, phoneFormatted.countryCode))
            return { invalidFormat: true };
    }
    return;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicC1pbnRsLWlucHV0LXRlbC52YWxpZGF0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9wLWludGwtaW5wdXQtdGVsL3NyYy92YWxpZGF0b3IvcC1pbnRsLWlucHV0LXRlbC52YWxpZGF0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxLQUFLLEdBQUcsTUFBTSx1QkFBdUIsQ0FBQztBQUM3QyxPQUFPLEVBQUUsV0FBVyxFQUFtQixNQUFNLHVCQUF1QixDQUFDO0FBQ3JFLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUVsRCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFFN0Q7Ozs7O0dBS0c7QUFDSCxNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBRyxDQUFDLE9BQXdCLEVBQUUsRUFBRTtJQUM3RCxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUs7UUFBRyxPQUFPO0lBQzVCLGFBQWE7SUFDYix1RUFBdUU7SUFDdkUsTUFBTSxFQUFFLEdBQWdCLE9BQU8sQ0FBQyxlQUFlLENBQWdCLENBQUM7SUFDaEUsTUFBTSxRQUFRLEdBQTJCLEVBQUUsRUFBRSxhQUFhLENBQUMsbUJBQW1CLENBQUMsSUFBSSxTQUFTLENBQUM7SUFDN0YsSUFBSSxRQUFRLEVBQUUsQ0FBQztRQUNYLE1BQU0saUJBQWlCLEdBQUcsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDaEUsSUFBSSxDQUFDLGlCQUFpQjtZQUFHLE9BQU8sQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQUVuRCxNQUFNLFNBQVMsR0FBb0IsR0FBRyxDQUFDLGVBQWUsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUNyRSxNQUFNLFdBQVcsR0FBZ0IsU0FBUyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDaEUsTUFBTSxjQUFjLEdBQUcsSUFBSSxVQUFVLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLFdBQVcsRUFBRSxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUN4RixNQUFNLE1BQU0sR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxNQUFNLEVBQUUsZUFBZSxDQUFDLGlCQUFpQixDQUFDLFdBQVcsRUFBRSxXQUFXLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ3JJLElBQUksQ0FBQyxTQUFTLENBQUMsc0JBQXNCLENBQUMsTUFBTSxFQUFFLGNBQWMsQ0FBQyxXQUFXLENBQUM7WUFBRyxPQUFPLEVBQUUsYUFBYSxFQUFFLElBQUksRUFBRSxDQUFDO0lBQy9HLENBQUM7SUFDRCxPQUFPO0FBQ1gsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgbHBuIGZyb20gJ2dvb2dsZS1saWJwaG9uZW51bWJlcic7XG5pbXBvcnQgeyBQaG9uZU51bWJlciwgUGhvbmVOdW1iZXJVdGlsIH0gZnJvbSAnZ29vZ2xlLWxpYnBob25lbnVtYmVyJztcbmltcG9ydCB7IENoYW5nZURhdGEgfSBmcm9tICcuLi9tb2RlbC9jaGFuZ2UtZGF0YSc7XG5pbXBvcnQgeyBBYnN0cmFjdENvbnRyb2wgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBMb2NhbFBob25lVXRpbHMgfSBmcm9tIFwiLi4vdXRpbHMvbG9jYWwtcGhvbmUtdXRpbHNcIjtcblxuLyoqXG4gKiBDaGVjayBpZiB0aGUgcGhvbmUgbnVtYmVyIHByb3ZpZGUgaXMgaW4gYSB2YWxpZCBmb3JtYXQgY29tcGFyZSB0byB0aGUgY291bnRyeSBzZWxlY3RlZFxuICogSWYgbm90LCBhbiBlcnJvciBpcyBwdXNoZWQgdG8gdGhlIEZvcm1Db250cm9sOiB7IGludmFsaWRGb3JtYXQ6IHRydWUgfVxuICogSXQgY2FuIGJlIGNhdGNoZWQgaW4gdGhlIHBhcmVudCBmb3JtIHRvIGRpc3BsYXkgYSB1c2VyIGVycm9yXG4gKiBAcGFyYW0gY29udHJvbFxuICovXG5leHBvcnQgY29uc3QgcGhvbmVOdW1iZXJWYWxpZGF0b3IgPSAoY29udHJvbDogQWJzdHJhY3RDb250cm9sKSA9PiB7XG4gICAgaWYoICFjb250cm9sLnZhbHVlICkgcmV0dXJuO1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICAvLyBOYXRpdmUgZWxlbWVudCBwcm9wZXJ0eSBpcyBhZGRlZCB3aXRoIE5hdGl2ZUVsZW1lbnRJbmplY3RvckRpcmVjdGl2ZVxuICAgIGNvbnN0IGVsOiBIVE1MRWxlbWVudCA9IGNvbnRyb2xbJ25hdGl2ZUVsZW1lbnQnXSBhcyBIVE1MRWxlbWVudDtcbiAgICBjb25zdCBpbnB1dEJveDogSFRNTElucHV0RWxlbWVudCB8IGFueSA9IGVsPy5xdWVyeVNlbGVjdG9yKCdpbnB1dFt0eXBlPVwidGVsXCJdJykgfHwgdW5kZWZpbmVkO1xuICAgIGlmKCBpbnB1dEJveCApe1xuICAgICAgICBjb25zdCBpc0NoZWNrVmFsaWRhdGlvbiA9ICEhaW5wdXRCb3guZ2V0QXR0cmlidXRlKCd2YWxpZGF0aW9uJyk7XG4gICAgICAgIGlmKCAhaXNDaGVja1ZhbGlkYXRpb24gKSBjb250cm9sLmNsZWFyVmFsaWRhdG9ycygpO1xuXG4gICAgICAgIGNvbnN0IHBob25lVXRpbDogUGhvbmVOdW1iZXJVdGlsID0gbHBuLlBob25lTnVtYmVyVXRpbC5nZXRJbnN0YW5jZSgpO1xuICAgICAgICBjb25zdCBwaG9uZU51bWJlcjogUGhvbmVOdW1iZXIgPSBwaG9uZVV0aWwucGFyc2UoY29udHJvbC52YWx1ZSk7XG4gICAgICAgIGNvbnN0IHBob25lRm9ybWF0dGVkID0gbmV3IENoYW5nZURhdGEoIWNvbnRyb2wudmFsdWUgPyBuZXcgUGhvbmVOdW1iZXIoKSA6IHBob25lTnVtYmVyKTtcbiAgICAgICAgY29uc3QgbnVtYmVyID0gcGhvbmVVdGlsLnBhcnNlKHBob25lRm9ybWF0dGVkLm51bWJlciwgTG9jYWxQaG9uZVV0aWxzLmdldENvdW50cnlJc29Db2RlKHBob25lTnVtYmVyLCBwaG9uZU51bWJlcj8uZ2V0Q291bnRyeUNvZGUoKSkpO1xuICAgICAgICBpZiggIXBob25lVXRpbC5pc1ZhbGlkTnVtYmVyRm9yUmVnaW9uKG51bWJlciwgcGhvbmVGb3JtYXR0ZWQuY291bnRyeUNvZGUpICkgcmV0dXJuIHsgaW52YWxpZEZvcm1hdDogdHJ1ZSB9O1xuICAgIH1cbiAgICByZXR1cm47XG59O1xuIl19